import _ from"lodash";import Mustache from"mustache";import fs from"fs";import{Parser}from"sql-ddl-to-json-schema";const parser=new Parser("mysql");function compactJson(a){return parser.feed(a),parser.toCompactJson(parser.results)}// clean the DDL content before feeding in parser
const nonDDLRegex=/(--.*(\n)?)|(\/\*.*(\n?))|(DELIMITER.*(\n.*)*\nDELIMITER.*(\n)?)|(CONSTRAINT.*CHECK.*\n)|(INSERT INTO.*(\n.*)*)/g,edgeCasesRegex=/((?<!((PRIMARY|FOREIGN) )|\S)KEY.*\n)|(UNIQUE KEY.*\n)/g,cleanupRegex=/,\n\s*(?=\))/g;function cleanedDDL(a){return a.replace(nonDDLRegex,"").replace(edgeCasesRegex,"").replace(cleanupRegex,"")}class Comparator{constructor(a,b){let c=a.split("/");this.firstLabel=c[c.length-1],c=b.split("/"),this.secLabel=c[c.length-1],this.firstStruct=this.jsonStruct(a),this.secStruct=this.jsonStruct(b)}jsonStruct(a){const b=fs.readFileSync(a),c=cleanedDDL(b.toString()),d=new Map,e=c.split(/\n{2,}/);for(const b of e)if(""!==b)try{const a=compactJson(b)[0];d.set(a.name,a)}catch(a){console.log("*******ERR*******"),console.log(a)}return d}compare(){const a=[],b=[];for(const[c,d]of this.firstStruct){const e=this.secStruct.get(c);if(e===void 0){b.push(c);continue}const[f,g]=this.getDiffStructs(d,e);(f||g)&&a.push({key:c,first:JSON.stringify(f),sec:JSON.stringify(g)}),this.secStruct.delete(c)}const c=[];for(const a of this.secStruct.keys())c.push(a);this.print_log(b,c,a),this.create_report(b,c,a)}print_log(a,b,c){console.log("###################################################"),console.log("Extra structs:"),console.log(this.firstLabel),console.log(a),console.log(this.secLabel),console.log(b),console.log("###################################################"),console.log("Diff structs:");for(const d of c)console.log(d.key),console.log(this.firstLabel),console.log(JSON.stringify(d.first)),console.log(this.secLabel),console.log(JSON.stringify(d.sec))}create_report(a,b,c){const d=fs.readFileSync("./reports/template.md").toString(),e=a.length+b.length,f=c.length,g=Mustache.render(d,{label:{first:this.firstLabel,sec:this.secLabel},extra:{exist:0<e,first:a,sec:b},diff:c,diffExist:0<f,perfect:0===e+f});fs.writeFileSync(`./reports/${this.firstLabel}-vs-${this.secLabel}.md`,g)}getDiffStructs(a,b){if(_.isEqual(a,b))return[null,null];if(typeof a!=typeof b)return[a,b];if(_.isArray(a)){let c=a.reduce((a,b)=>({...a,[b.name]:b}),{}),d=b.reduce((a,b)=>({...a,[b.name]:b}),{});return this.getDiffStructs(c,d)}if(_.isObject(a)){for(const c in a){if(!_.isEqual(a[c],b[c])){const[d,e]=this.getDiffStructs(a[c],b[c]);if(d||e){a[c]=d,b[c]=e;continue}}delete a[c],delete b[c]}if(0===Object.keys(a).length&&0===Object.keys(b).length)return[null,null]}return[a,b]}}const filePaths=process.argv.slice(2),comparator=new Comparator(...filePaths);comparator.compare();
